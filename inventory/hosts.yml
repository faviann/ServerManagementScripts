---
# Ansible Inventory for Proxmox LXC Containers
# This inventory organizes hosts by resource tiers and functional groups

all:
  children:
    # API controller for Proxmox operations
    proxmox_api:
      hosts:
        proxmox_api_controller:
          ansible_connection: local
          ansible_python_interpreter: "{{ ansible_playbook_python }}"

    # === Resource Tier Groups ===
    # Hosts are assigned to exactly ONE resource tier based on their size needs

    tiny_servers:
      hosts:
      # Placeholder for future tiny-tier hosts
      children: {}

    small_servers:
      hosts:
        codeserver:
          # Example: VSCode server - small footprint
          proxmox_lxc:
            vmid: 301
            hostname: codeserver
            description: "VSCode server for remote development"

        frontend:
          # Example: Frontend web service
          proxmox_lxc:
            vmid: 302
            hostname: frontend
            description: "Frontend application service"

    medium_servers:
      hosts:
        media:
          # Example: General media processing service
          proxmox_lxc:
            vmid: 303
            hostname: media
            description: "Media processing and management service"

    large_servers:
      hosts:
        jellyfin:
          # Example: Jellyfin media server (resource intensive)
          proxmox_lxc:
            vmid: 304
            hostname: jellyfin
            description: "Jellyfin media server with transcoding"

    # === Functional Groups (Compositional) ===
    # Hosts can belong to MULTIPLE functional groups based on capabilities needed

    docker_hosts:
      hosts:
        codeserver:
        frontend:
        media:
        jellyfin:
      children: {}

    gpu_access:
      hosts:
        jellyfin:  # GPU for transcoding
        media:     # GPU for media processing
      children: {}

    wireguard_hosts:
      hosts:
      # Placeholder for hosts needing WireGuard
      children: {}

    service_agents:
      # Service agents inherit from docker_hosts and add service tooling
      # Almost all docker hosts are service agents (exceptions like reverse-proxy excluded)
      hosts:
        codeserver:
        frontend:
        media:
        # Note: jellyfin is a docker_host but NOT a service_agent
        # because it doesn't need traefik-kop/socket-proxy/dockwatch
      children: {}

    # === Legacy/Compatibility Groups ===
    # Maintained for backward compatibility with existing playbooks

    lxcs:
      # All managed LXC containers (for SSH-based operations after provisioning)
      hosts:
        codeserver:
        frontend:
        media:
        jellyfin:
      children: {}
